#!/bin/sh

BIN_NAME=$(basename $0)
COMMAND_NAME=$1
SUB_COMMAND_NAME=$2
export DOTFILES_DIR=$HOME/.dotfiles

sub_help () {
    echo "Usage: $BIN_NAME <command>\n"
    echo "Commands:"
    echo "   boot               Installs settings for macOS."
    echo "   help               This help message"
    echo "   edit               Open dotfiles in default editor ($EDITOR) and Git GUI ($GIT_GUI)"
    echo "   reload             Reload dotfiles"
    if [ "$(uname)" == "Darwin" ]; then
				echo "   update             Update macOS Applications and Homebrew (cask) packages"
				echo "   macos              Apply macOS system defaults"
				echo "   dock               Apply macOS Dock settings"
    fi
    echo "   go                 Apply go settings"
}

sub_boot () {
		echo "Setting up OS X"
		clear
		source "$DOTFILES_DIR/install.sh"
		#	source "$DOTFILES_DIR/install/osx/osx.sh"
}

sub_edit () {
    sh -c "$EDITOR --cmd 'cd $DOTFILES_DIR' $DOTFILES_DIR"
}

sub_reload () {
    source ~/.zprofile && echo "Zsh reloaded."
}

sub_update () {
    sudo softwareupdate -i -a
    brew update
    brew upgrade
    sudo gem update --system
    sudo gem update
}

sub_osx () {
		sub_macos
}

sub_macos () {
		for DEFAULTS_FILE in "$DOTFILES_DIR"/osx/defaults*.sh; do
				[ -f "$DEFAULTS_FILE" ] && echo "Applying $DEFAULTS_FILE" && source "$DEFAULTS_FILE"
		done
		echo "Done. Some changes may require a logout/restart to take effect."
}

sub_dock () {
		source "$DOTFILES_DIR/osx/dock.sh" && echo "Dock reloaded."
}

sub_go () {
		source "$DOTFILES_DIR/install/go.sh" && echo "go utilies installed."
}

sub_install () {
		local SCRIPT="${DOTFILES_DIR}/install/${SUB_COMMAND_NAME}.sh"
		[ -f "$SCRIPT" ] && source "$SCRIPT" || echo "Unable to find script to install ${SUB_COMMAND_NAME}"
}

# Make sure to keep this in sync with the available public commands

sub_completion () {
		echo "help edit reload update osx dock install"
}

case $COMMAND_NAME in
		"" | "-h" | "--help")
				sub_help
				;;
		*)
				shift
				sub_${COMMAND_NAME} $@
				if [ $? = 127 ]; then
						echo "'$COMMAND_NAME' is not a known command or has errors." >&2
						sub_help
						exit 1
				fi
				;;
esac
